<!DOCTYPE html>
<!-- saved from url=(0150)https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <title>iOS Drawing Concepts</title>
    <meta http-equiv="X-UA-Compatible" content="IE=7">
    
    <meta id="book-resource-type" name="book-resource-type" content="Guide">
    <meta scheme="apple_ref" id="identifier" name="identifier" content="//apple_ref/doc/uid/TP40010156">
    <meta id="document-version" name="document-version" content="3.1.0">
    <meta id="build" name="build" content="c1e4c7a89af8f899a21cfa81fc33ba42">
    <meta id="chapterId" name="chapterId" content="TP40010156-CH14">
    <meta id="date" name="date" content="2012-09-19">
    <meta id="description" name="description" content="Describes the APIs and techniques for drawing and printing on iOS.">
    <meta id="book-title" name="book-title" content="Drawing and Printing Guide for iOS">
    <meta id="book-root" name="book-root" content="../">
    <meta id="book-json" name="book-json" content="../book.json">
    <meta id="devcenter" name="devcenter" content="Mac Dev Center">
    <meta id="devcenter-url" name="devcenter-url" content="http://developer.apple.com/devcenter/mac">
    <meta id="reflib" name="reflib" content="Documentation Archive">
    <meta id="book-assignments" name="book-assignments" content="{Type/Guide}, {Technologies/Cocoa Layer/UIKit}, {Topic/Graphics &amp; Animation/2D Drawing}">
    
    
    <meta id="copyright" name="copyright" content="Copyright 2018 Apple Inc. All Rights Reserved.">
    <meta id="xcode-display" name="xcode-display" content="render">
    <meta id="IndexTitle" name="IndexTitle" content="Drawing and Printing Guide for iOS: iOS Drawing Concepts">
    <meta id="resources-uri" name="resources-uri" content="../../../../../Resources/1282">
    <link id="book-index-page" rel="Start" title="Drawing and Printing Guide for iOS" type="text/html" href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/index.html">
    <link id="next-page" rel="Next" type="text/html" href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html">
    <link id="previous-page" rel="Prev" type="text/html" href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Introduction/Introduction.html">
    <link rel="stylesheet" type="text/css" href="./iOS Drawing Concepts_files/screen.css">
    
    <!-- xcode_css -->
    <link rel="stylesheet" type="text/css" href="./iOS Drawing Concepts_files/feedback.css">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	<meta id="platforms" name="platforms" content="">
</head>    
<body class="isShowingTOC" id=""><a name="//apple_ref/doc/uid/TP40010156-CH14" title="iOS Drawing Concepts"></a>
    <div id="_omniture_top">
    <!-- SiteCatalyst code version: H.8. Copyright 1997-2006 Omniture, Inc. -->
    <script type="text/javascript">
    /* RSID: */
    var s_account="appleglobal,appleusdeveloper,dappdeveloperlib"
    </script>

    <script type="text/javascript" src="./iOS Drawing Concepts_files/s_code_h.js"></script>
    <script type="text/javascript">
    s.pageName=AC.Tracking.pageName();
    s.channel="www.us.developer"

    /************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
    var s_code=s.t();if(s_code)document.write(s_code)</script>
    <!-- End SiteCatalyst code version: H.8. -->
    </div>

    <div id="adcHeader" class="hideOnPrint hideInXcode">
        <div id="ssi_Header" class="hideInXcode unified">
            <a id="ssi_LibraryTitle" href="https://developer.apple.com/library/archive/navigation/" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/navigation/_1&quot;;return this.s_oc?this.s_oc(e):true">Documentation Archive</a>
            <a id="ssi_AppleDeveloperConnection" href="https://developer.apple.com/" onclick="s_objectID=&quot;https://developer.apple.com/_1&quot;;return this.s_oc?this.s_oc(e):true">Developer</a>
            <div id="ssi_SearchButton" role="button" title="Search">Search</div>
        </div>
        <form id="ssi_SearchMenu" method="get" action="https://developer.apple.com/library/archive/search/" accept-charset="utf-8">
            <label for="adcsearch">Search Documentation Archive</label>
            
            
    
            <input type="search" id="ssi_SearchField" name="q" accesskey="s" results="5">
        </form>
    </div>

    <header id="header">
        <div id="title" role="banner">
            <h1>Drawing and Printing Guide for iOS</h1>
            <span id="file_links">
                <a id="PDF_link" role="button" tabindex="4" rel="alternate" title="Download PDF" class=""><span id="pdf_icon"></span>PDF</a>
                <a id="Companion_link" role="button" tabindex="3" title="Download Companion File" class=""><span id="companion_icon"></span>Companion File</a>
            </span>
        </div>
        <ul id="headerButtons" class="hideOnPrint" role="toolbar">
            <li id="toc_button" style="">
                <button tabindex="5" id="table_of_contents" class="open" role="checkbox" aria-label="Show Table of Contents"><span class="disclosure"></span>Table of Contents</button>
            </li>
            <li id="jumpto_button" style="display:none" role="navigation"><select tabindex="6" id="jumpTo"><option value="top">Jump To…</option></select></li>
            <li id="downloadSample_button" style="display:none">
                <a id="Sample_link"><button id="Sample_button">Download Sample Code</button></a>
            </li>
        </ul>
    </header>
    <nav id="tocContainer" tabindex="7" class="isShowingTOC">
        <ul id="toc" role="tree"><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH1-SW1"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010156-CH1-SW1">Introduction</a></span></li><li class="children open" data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW1" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW1">iOS Drawing Concepts</a></span><ul><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW2" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW2">The UIKit Graphics System</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW3"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW3">The View Drawing Cycle</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW14"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW14">Coordinate Systems and Drawing in iOS</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW7"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW7">Points Versus Pixels</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW5" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW5">Obtaining Graphics Contexts</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW18"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW18">Drawing to the Screen</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW22"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW22">Drawing to Bitmap Contexts and PDF Contexts</a></span></li></ul></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW6"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW6">Color and Color Spaces</a></span></li></ul></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW11" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW11">Drawing with Quartz and UIKit</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW12"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW12">Configuring the Graphics Context</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW20"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW20">Creating and Drawing Paths</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW35"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW35">Creating Patterns, Gradients, and Shadings</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW10" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW10">Customizing the Coordinate Space</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW4"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW4">Using Coordinate Transforms to Improve Drawing Performance</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW26"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW26">Flipping the Default Coordinate System</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW8" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW8">Side Effects of Drawing with Different Coordinate Systems</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW28"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW28">Arcs and Rotations</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW29"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW29">Shadows</a></span></li></ul></li></ul></li></ul></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW15" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW15">Applying Core Animation Effects</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW16"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW16">About Layers</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW17"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW17">About Animations</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH14-SW37"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW37">Accounting for Scale Factors in Core Animation Layers</a></span></li></ul></li></ul></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH11-SW1" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html#//apple_ref/doc/uid/TP40010156-CH11-SW1">Drawing Shapes Using Bézier Paths</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH11-SW2"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html#//apple_ref/doc/uid/TP40010156-CH11-SW2">Bézier Path Basics</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH11-SW3"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html#//apple_ref/doc/uid/TP40010156-CH11-SW3">Adding Lines and Polygons to Your Path</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH11-SW5"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html#//apple_ref/doc/uid/TP40010156-CH11-SW5">Adding Arcs to Your Path</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH11-SW23"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html#//apple_ref/doc/uid/TP40010156-CH11-SW23">Adding Curves to Your Path</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH11-SW9"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html#//apple_ref/doc/uid/TP40010156-CH11-SW9">Creating Oval and Rectangular Paths</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH11-SW10"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html#//apple_ref/doc/uid/TP40010156-CH11-SW10">Modifying the Path Using Core Graphics Functions</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH11-SW13"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html#//apple_ref/doc/uid/TP40010156-CH11-SW13">Rendering the Contents of a Bézier Path Object</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH11-SW15"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html#//apple_ref/doc/uid/TP40010156-CH11-SW15">Doing Hit-Detection on a Path</a></span></li></ul></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH13-SW1" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/HandlingImages/Images.html#//apple_ref/doc/uid/TP40010156-CH13-SW1">Drawing and Creating Images</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH13-SW10"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/HandlingImages/Images.html#//apple_ref/doc/uid/TP40010156-CH13-SW10">Drawing Images</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH13-SW8"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/HandlingImages/Images.html#//apple_ref/doc/uid/TP40010156-CH13-SW8">Creating New Images Using Bitmap Graphics Contexts</a></span></li></ul></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH10-SW1" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GeneratingPDF/GeneratingPDF.html#//apple_ref/doc/uid/TP40010156-CH10-SW1">Generating PDF Content</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH10-SW3"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GeneratingPDF/GeneratingPDF.html#//apple_ref/doc/uid/TP40010156-CH10-SW3">Creating and Configuring the PDF Context</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH10-SW5"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GeneratingPDF/GeneratingPDF.html#//apple_ref/doc/uid/TP40010156-CH10-SW5">Drawing PDF Pages</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH10-SW7"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GeneratingPDF/GeneratingPDF.html#//apple_ref/doc/uid/TP40010156-CH10-SW7">Creating Links Within Your PDF Content</a></span></li></ul></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW1" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW1">Printing</a></span><ul><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW2" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW2">Printing in iOS is Designed to be Simple and Intuitive</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW7"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW7">The Printing User Interface</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW5"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW5">How Printing Works in iOS</a></span></li></ul></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW3" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW3">The UIKit Printing API</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW13"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW13">Printing Support Overview</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW14"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW14">Printing Workflow</a></span></li></ul></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW20"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW20">Printing Printer-Ready Content</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW21" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW21">Using Print Formatters and Page Renderers</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW22"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW22">Setting the Layout Properties for the Print Job</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW11" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW11">Using a Print Formatter</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW23"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW23">Printing Text or HTML Documents</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW24"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW24">Using a View Print Formatter</a></span></li></ul></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW25" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW25">Using a Page Renderer</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW26"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW26">Setting Page Renderer Attributes</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW27"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW27">Implementing the Drawing Methods</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW28"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW28">Using One or More Formatters with a Page Renderer</a></span></li></ul></li></ul></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW52"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW52">Testing the Printing of App Content</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW15" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW15">Common Printing Tasks</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW16"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW16">Testing for Printing Availability</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW17"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW17">Specifying Print-Job Information</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW18"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW18">Specifying Paper Size, Orientation, and Duplexing Options</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW49" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW49">Integrating Printing Into Your User Interface</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW32"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW32">Presenting Printing Options Using a Print Interaction Controller</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW50"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW50">Printing From the Activity Sheet</a></span></li></ul></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH12-SW19"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Printing/Printing.html#//apple_ref/doc/uid/TP40010156-CH12-SW19">Responding to Print-Job Completion and Errors</a></span></li></ul></li></ul></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH18-SW1"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/DrawingTips/DrawingTips.html#//apple_ref/doc/uid/TP40010156-CH18-SW1">Appendix A: Improving Drawing Performance</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH15-SW1" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/SupportingHiResScreensInViews/SupportingHiResScreensInViews.html#//apple_ref/doc/uid/TP40010156-CH15-SW1">Appendix B: Supporting High-Resolution Screens In Views</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH15-SW7"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/SupportingHiResScreensInViews/SupportingHiResScreensInViews.html#//apple_ref/doc/uid/TP40010156-CH15-SW7">Checklist for Supporting High-Resolution Screens</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH15-SW4"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/SupportingHiResScreensInViews/SupportingHiResScreensInViews.html#//apple_ref/doc/uid/TP40010156-CH15-SW4">Drawing Improvements That You Get for Free</a></span></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH15-SW8" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/SupportingHiResScreensInViews/SupportingHiResScreensInViews.html#//apple_ref/doc/uid/TP40010156-CH15-SW8">Updating Your Image Resource Files</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH15-SW3"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/SupportingHiResScreensInViews/SupportingHiResScreensInViews.html#//apple_ref/doc/uid/TP40010156-CH15-SW3">Loading Images into Your App</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH15-SW15"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/SupportingHiResScreensInViews/SupportingHiResScreensInViews.html#//apple_ref/doc/uid/TP40010156-CH15-SW15">Using an Image View to Display Multiple Images</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH15-SW2"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/SupportingHiResScreensInViews/SupportingHiResScreensInViews.html#//apple_ref/doc/uid/TP40010156-CH15-SW2">Updating Your App’s Icons and Launch Images</a></span></li></ul></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH15-SW11"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/SupportingHiResScreensInViews/SupportingHiResScreensInViews.html#//apple_ref/doc/uid/TP40010156-CH15-SW11">Drawing High-Resolution Content Using OpenGL ES or GLKit</a></span></li></ul></li><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH17-SW1" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/LoadingImages/LoadingImages.html#//apple_ref/doc/uid/TP40010156-CH17-SW1">Appendix C: Loading Images</a></span><ul><li class="children " data-aref="//apple_ref/doc/uid/TP40010156-CH17-SW3" role="treeitem"><span class="disclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/LoadingImages/LoadingImages.html#//apple_ref/doc/uid/TP40010156-CH17-SW3">System Support for Images</a></span><ul><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH17-SW4"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/LoadingImages/LoadingImages.html#//apple_ref/doc/uid/TP40010156-CH17-SW4">UIKit Image Classes and Functions</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH17-SW5"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/LoadingImages/LoadingImages.html#//apple_ref/doc/uid/TP40010156-CH17-SW5">Other Image-Related Frameworks</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH17-SW7"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/LoadingImages/LoadingImages.html#//apple_ref/doc/uid/TP40010156-CH17-SW7">Supported Image Formats</a></span></li></ul></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH17-SW9"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/LoadingImages/LoadingImages.html#//apple_ref/doc/uid/TP40010156-CH17-SW9">Maintaining Image Quality</a></span></li></ul></li><li class=" " data-aref="//apple_ref/doc/uid/TP40010156-CH99-SW1"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/RevisionHistory.html#//apple_ref/doc/uid/TP40010156-CH99-SW1">Revision History</a></span></li><ul id="TOC_relatedBooks_0" class="related"><h3>RELATED SAMPLE CODE</h3><li class=" " data-aref="//apple_ref/doc/uid/DTS40008063"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/samplecode/Reflection/Introduction/Intro.html#//apple_ref/doc/uid/DTS40008063">Reflection</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/DTS40007531"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/samplecode/QuartzDemo/Introduction/Intro.html#//apple_ref/doc/uid/DTS40007531">Quartz2D for iOS</a></span></li></ul><ul id="TOC_relatedBooks_1" class="related"><h3>RELATED DOCUMENTS</h3><li class=" " data-aref="//apple_ref/doc/uid/TP40009503"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/WindowsViews/Conceptual/ViewPG_iPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009503">View Programming Guide for iOS</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40007072"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007072">App Programming Guide for iOS</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP30001066"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001066">Quartz 2D Programming Guide</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40004514"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514">Core Animation Programming Guide</a></span></li><li class=" " data-aref="//apple_ref/doc/uid/TP40009542"><span class="nodisclosure"></span><span class="sectionName"><a href="https://developer.apple.com/library/archive/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009542">Text Programming Guide for iOS</a></span></li></ul></ul>
    </nav>

    <article id="contents" tabindex="0" role="main" class="isShowingTOC">
        <div id="pageNavigationLinks_top" class="pageNavigationLinks">
            <a class="nextLink" rel="next" href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_1&quot;;return this.s_oc?this.s_oc(e):true">Next</a><a class="previousLink" rel="prev" href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Introduction/Introduction.html" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_2&quot;;return this.s_oc?this.s_oc(e):true">Previous</a>
        </div>
        <a id="top" name="top"></a>
        <a id="INDEX" href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/index.html" style="display:none;" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_3&quot;;return this.s_oc?this.s_oc(e):true"></a>
        
        <a name="//apple_ref/doc/uid/TP40010156-CH14-SW1" title="iOS Drawing Concepts"></a><h1 id="pageTitle">iOS Drawing Concepts</h1><p>High-quality graphics are an important part of your app’s user interface. Providing high-quality graphics not only makes your app look good, but it also makes your app look like a natural extension to the rest of the system. iOS provides two primary paths for creating high-quality graphics in your system: OpenGL or native rendering using Quartz, Core Animation, and UIKit. This document describes native rendering. (To learn about OpenGL drawing, see <em><a href="https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008793" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/OpenGLES_Programmi_1&quot;;return this.s_oc?this.s_oc(e):true">OpenGL ES Programming Guide</a></em>.)</p><p>Quartz is the main drawing interface, providing support for path-based drawing, anti-aliased rendering, gradient fill patterns, images, colors, coordinate-space transformations, and PDF document creation, display, and parsing. UIKit provides Objective-C wrappers for line art, Quartz images, and color manipulations. Core Animation provides the underlying support for animating changes in many UIKit view <span class="pediaLink" data-header="Declared property" data-contents="A declared property provides a syntactical shorthand for declaring a class’s accessor methods and, optionally, implementing them. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/D_1&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/DeclaredProperty.html#//apple_ref/doc/uid/TP40008195-CH13">properties</a></span> and can also be used to implement custom animations.</p><p>This chapter provides an overview of the drawing process for iOS apps, along with specific drawing techniques for each of the supported drawing technologies. You will also find tips and guidance on how to optimize your drawing code for the iOS platform.</p><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/TP40010156-CH14-DontLinkElementID_4" title="Important"></a><p><strong>Important:</strong>&nbsp;Not all UIKit classes are thread safe. Be sure to check the documentation before performing drawing-related operations on threads other than your app’s main thread.</p><p></p></aside></div><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW2" title="The UIKit Graphics System"></a><h2 class="jump">The UIKit Graphics System</h2><p>In iOS, all drawing to the screen—regardless of whether it involves OpenGL, Quartz, UIKit, or Core Animation—occurs within the confines of an instance of the <code><a href="https://developer.apple.com/documentation/uikit/uiview" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview_1&quot;;return this.s_oc?this.s_oc(e):true">UIView</a></code> class or a subclass thereof. <span class="pediaLink" data-header="Model-View-Controller" data-contents="The Model-View-Controller (MVC) design pattern assigns objects in an application one of three roles: model, view, or controller. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/M_1&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/MVC.html#//apple_ref/doc/uid/TP40008195-CH32">Views</a></span> define the portion of the screen in which drawing occurs. If you use system-provided views, this drawing is handled for you automatically. If you define custom views, however, you must provide the drawing code yourself. If you use Quartz, Core Animation, and UIKit to draw, you use the drawing concepts described in the following sections.</p><p>In addition to drawing directly to the screen, UIKit also allows you to draw into offscreen bitmap and PDF graphics contexts. When you draw in an offscreen context, you are not drawing in a view, which means that concepts such as the view drawing cycle do not apply (unless you then obtain that image and draw it in an image view or similar).</p><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW3" title="The View Drawing Cycle"></a><h3 class="jump">The View Drawing Cycle</h3><p>The basic drawing model for subclasses of the <code><a href="https://developer.apple.com/documentation/uikit/uiview" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview_2&quot;;return this.s_oc?this.s_oc(e):true">UIView</a></code> class involves updating content on demand. The <code>UIView</code> class makes the update process easier and more efficient; however, by gathering the update requests you make and delivering them to your drawing code at the most appropriate time.</p><p>When a view is first shown or when a portion of the view needs to be redrawn, iOS asks the view to draw its content by calling the view’s <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622529-draw" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622529-draw_1&quot;;return this.s_oc?this.s_oc(e):true">drawRect:</a></code> method.</p><p>There are several actions that can trigger a view update:</p><ul class="ul"><li class="li"><p>Moving or removing another view that was partially obscuring your view </p></li><li class="li"><p>Making a previously hidden view visible again by setting its <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622585-hidden" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622585-hidden_1&quot;;return this.s_oc?this.s_oc(e):true">hidden</a></code><span class="pediaLink" data-header="Declared property" data-contents="A declared property provides a syntactical shorthand for declaring a class’s accessor methods and, optionally, implementing them. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/D_2&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/DeclaredProperty.html#//apple_ref/doc/uid/TP40008195-CH13"> property</a></span> to <code><!--a  -->NO<!--/a--></code></p></li><li class="li"><p>Scrolling a view off of the screen and then back onto the screen</p></li><li class="li"><p>Explicitly calling the <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622437-setneedsdisplay" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622437-setneedsdisplay_1&quot;;return this.s_oc?this.s_oc(e):true">setNeedsDisplay</a></code> or <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622587-setneedsdisplayinrect" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622587-setneedsdisplayinrect_1&quot;;return this.s_oc?this.s_oc(e):true">setNeedsDisplayInRect:</a></code> method of your view</p></li></ul><p>System views are redrawn automatically. For custom views, you must override the <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622529-draw" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622529-draw_2&quot;;return this.s_oc?this.s_oc(e):true">drawRect:</a></code> method and perform all your drawing inside it. Inside your <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622529-draw" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622529-draw_3&quot;;return this.s_oc?this.s_oc(e):true">drawRect:</a></code> method, use the native drawing technologies to draw shapes, text, images, gradients, or any other visual content you want. The first time your view becomes visible, iOS passes a rectangle to the view’s <code>drawRect:</code> method that contains your view’s entire visible area. During subsequent calls, the rectangle includes only the portion of the view that actually needs to be redrawn. For maximum performance, you should redraw only affected content.</p><p>After calling your <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622529-draw" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622529-draw_4&quot;;return this.s_oc?this.s_oc(e):true">drawRect:</a></code> method, the view marks itself as updated and waits for new actions to arrive and trigger another update cycle. If your view displays static content, then all you need to do is respond to changes in your view’s visibility caused by scrolling and the presence of other views.</p><p>If you want to change the contents of the view, however, you must tell your view to redraw its contents. To do this, call the <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622437-setneedsdisplay" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622437-setneedsdisplay_2&quot;;return this.s_oc?this.s_oc(e):true">setNeedsDisplay</a></code> or <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622587-setneedsdisplayinrect" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622587-setneedsdisplayinrect_2&quot;;return this.s_oc?this.s_oc(e):true">setNeedsDisplayInRect:</a></code> method to trigger an update. For example, if you were updating content several times a second, you might want to set up a timer to update your view. You might also update your view in response to user interactions or the creation of new content in your view.</p><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/TP40010156-CH14-DontLinkElementID_5" title="Important"></a><p><strong>Important:</strong>&nbsp;Do not call your view’s <code>drawRect:</code> method yourself. That method should be called <em>only</em> by code built into iOS during a screen repaint. At other times, no graphics context exists, so drawing is not possible. (Graphics contexts are explained in the next section.)</p><p></p></aside></div></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW14" title="Coordinate Systems and Drawing in iOS"></a><h3 class="jump">Coordinate Systems and Drawing in iOS</h3><p>When an app draws something in iOS, it has to locate the drawn content in a two-dimensional space defined by a coordinate system. This notion might seem straightforward at first glance, but it isn’t. Apps in iOS sometimes have to deal with different coordinate systems when drawing. </p><p>In iOS, all drawing occurs in a graphics context. Conceptually, a graphics context is an object that describes where and how drawing should occur, including basic drawing attributes such as the colors to use when drawing, the clipping area, line width and style information, font information, compositing options, and so on.</p><p>In addition, as shown in <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW24" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_4&quot;;return this.s_oc?this.s_oc(e):true">Figure 1-1</a></span>, each graphics context has a coordinate system. More precisely, each graphics context has three coordinate systems:</p><ul class="ul"><li class="li"><p>The drawing (user) coordinate system. This coordinate system is used when you issue drawing commands.</p></li><li class="li"><p>The view coordinate system (base space). This coordinate system is a fixed coordinate system relative to the view.</p></li><li class="li"><p>The (physical) device coordinate system. This coordinate system represents pixels on the physical screen.</p></li></ul><figure class="figure"><a name="//apple_ref/doc/uid/TP40010156-CH14-SW24" title="Figure 1-1The relationship between drawing coordinates, view coordinates, and hardware coordinates"></a><figcaption><strong class="caption_number">Figure 1-1</strong>&nbsp;&nbsp;The relationship between drawing coordinates, view coordinates, and hardware coordinates</figcaption><img src="./iOS Drawing Concepts_files/coordinate_differences_2x.png" class="wide-image" alt="" width="704" height="295"><img src="./iOS Drawing Concepts_files/coordinate_differences_2x.png" class="ipad-scaled-image" alt="" width="670" height="280"></figure><p>The drawing frameworks of iOS create graphics contexts for drawing to specific destinations—the screen, bitmaps, PDF content, and so on—and these graphics contexts establish the initial drawing coordinate system for that destination. This initial drawing coordinate system is known as the <strong>default coordinate system</strong>, and is a 1:1 mapping onto the view’s underlying coordinate system.</p><p>Each view also has a <em class="newTerm">current transformation matrix (CTM)</em>, a mathematical matrix that maps the points in the current drawing coordinate system to the (fixed) view coordinate system. The app can modify this matrix (as described later) to change the behavior of future drawing operations.</p><p>Each of the drawing frameworks of iOS establishes a default coordinate system based on the current graphics context. In iOS, there are two main types of coordinate systems:</p><ul class="ul"><li class="li"><p>An upper-left-origin coordinate system (ULO), in which the origin of drawing operations is at the upper-left corner of the drawing area, with positive values extending downward and to the right. The default coordinate system used by the UIKit and Core Animation frameworks is ULO-based.</p></li><li class="li"><p>A lower-left-origin coordinate system (LLO), in which the origin of drawing operations is at the lower-left corner of the drawing area, with positive values extending upward and to the right. The default coordinate system used by Core Graphics framework is LLO-based.</p></li></ul><p>These coordinate systems are shown in <span class="content_text">Figure 1-2</span>.</p><figure class="figure"><a name="//apple_ref/doc/uid/TP40010156-CH14-SW32" title="Figure 1-2Default coordinate systems in iOS"></a><figcaption><strong class="caption_number">Figure 1-2</strong>&nbsp;&nbsp;Default coordinate systems in iOS</figcaption><img src="./iOS Drawing Concepts_files/flipped_coordinates-2_2x.png" alt="" width="514" height="317"></figure><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40010156-CH14-SW19" title="Note"></a><p><strong>Note:</strong>&nbsp;The default coordinate system in OS X is LLO-based. Although the drawing functions and methods of the Core Graphics and AppKit frameworks are perfectly suited to this default coordinate system, AppKit provides programmatic support for flipping the drawing coordinate system to have an upper-left origin.</p><p></p></aside></div><p>Before calling your view’s <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622529-draw" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622529-draw_5&quot;;return this.s_oc?this.s_oc(e):true">drawRect:</a></code> method, UIKit establishes the default coordinate system for drawing to the screen by making a graphics context available for drawing operations. Within a view’s <code>drawRect:</code> method, an app can set graphics-state parameters (such as fill color) and draw to the current graphics context without needing to refer to the graphics context explicitly. This implicit graphics context establishes a ULO default coordinate system.</p></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW7" title="Points Versus Pixels"></a><h3 class="jump">Points Versus Pixels</h3><p>In iOS there is a distinction between the coordinates you specify in your drawing code and the pixels of the underlying device. When using native drawing technologies such as Quartz, UIKit, and Core Animation, the drawing coordinate space and the view’s coordinate space are both <em class="newTerm">logical coordinate spaces</em>, with distances measured in <em class="newTerm">points</em>. These logical coordinate systems are decoupled from the device coordinate space used by the system frameworks to manage the pixels onscreen.</p><p>The system automatically maps points in the view’s coordinate space to pixels in the device coordinate space, but this mapping is not always one-to-one. This behavior leads to an important fact that you should always remember: </p><ul class="simple"><li><p><strong>One point does not necessarily correspond to one physical pixel.</strong></p></li></ul><p>The purpose of using points (and the logical coordinate system) is to provide a consistent size of output that is device independent. For most purposes, the actual size of a point is irrelevant. The goal of points is to provide a relatively consistent scale that you can use in your code to specify the size and position of views and rendered content. How points are actually mapped to pixels is a detail that is handled by the system frameworks. For example, on a device with a high-resolution screen, a line that is one point wide may actually result in a line that is two physical pixels wide. The result is that if you draw the same content on two similar devices, with only one of them having a high-resolution screen, the content appears to be about the same size on both devices.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40010156-CH14-DontLinkElementID_6" title="Note"></a><p><strong>Note:</strong>&nbsp;In the context of PDF rendering and printing, Core Graphics defines "point" using the industry standard mapping of one point to 1/72 of an inch.</p><p></p></aside></div><p>In iOS, the <code><a href="https://developer.apple.com/documentation/uikit/uiscreen" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiscreen_1&quot;;return this.s_oc?this.s_oc(e):true">UIScreen</a></code>, <code><a href="https://developer.apple.com/documentation/uikit/uiview" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview_3&quot;;return this.s_oc?this.s_oc(e):true">UIView</a></code>, <code><a href="https://developer.apple.com/documentation/uikit/uiimage" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiimage_1&quot;;return this.s_oc?this.s_oc(e):true">UIImage</a></code>, and <code><a href="https://developer.apple.com/documentation/quartzcore/calayer" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/quartzcore/calayer_1&quot;;return this.s_oc?this.s_oc(e):true">CALayer</a></code> classes provide properties to obtain (and, in some cases, set) a <em class="newTerm">scale factor</em> that describes the relationship between points and pixels for that particular object. For example, every UIKit view has a <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622657-contentscalefactor" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622657-contentscalefactor_1&quot;;return this.s_oc?this.s_oc(e):true">contentScaleFactor</a></code> property. On a standard-resolution screen, the scale factor is typically 1.0. On a high-resolution screen, the scale factor is typically 2.0. In the future, other scale factors may also be possible. (In iOS prior to version 4, you should assume a scale factor of 1.0.)</p><p>Native drawing technologies, such as Core Graphics, take the current scale factor into account for you. For example, if one of your views implements a <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622529-draw" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622529-draw_6&quot;;return this.s_oc?this.s_oc(e):true">drawRect:</a></code> method, UIKit automatically sets the scale factor for that view to the screen’s scale factor. In addition, UIKit automatically modifies the current transformation matrix of any graphics contexts used during drawing to take into account the view’s scale factor. Thus, any content you draw in your <code>drawRect:</code> method is scaled appropriately for the underlying device’s screen.</p><p>Because of this automatic mapping, when writing drawing code, pixels <em>usually</em> don’t matter. However, there are times when you might need to change your app’s drawing behavior depending on how points are mapped to pixels—to download higher-resolution images on devices with high-resolution screens or to avoid scaling artifacts when drawing on a low-resolution screen, for example.</p><p>In iOS, when you draw things onscreen, the graphics subsystem uses a technique called antialiasing to approximate a higher-resolution image on a lower-resolution screen. The best way to explain this technique is by example. When you draw a black vertical line on a solid white background, if that line falls exactly on a pixel, it appears as a series of black pixels in a field of white. If it appears exactly between two pixels, however, it appears as two grey pixels side-by-side, as shown in <span class="content_text">Figure 1-3</span>.</p><figure class="figure"><a name="//apple_ref/doc/uid/TP40010156-CH14-SW25" title="Figure 1-3A one-point line centered at a whole-numbered point value"></a><figcaption><strong class="caption_number">Figure 1-3</strong>&nbsp;&nbsp;A one-point line centered at a whole-numbered point value</figcaption><img src="./iOS Drawing Concepts_files/pixel_alignment_2x.png" alt="" width="413" height="219"></figure><p>Positions defined by whole-numbered points fall at the midpoint between pixels. For example, if you draw a one-pixel-wide vertical line from (1.0, 1.0) to (1.0, 10.0), you get a fuzzy grey line. If you draw a two-pixel-wide line, you get a solid black line because it fully covers two pixels (one on either side of the specified point). As a rule, lines that are an odd number of physical pixels wide appear softer than lines with widths measured in even numbers of physical pixels unless you adjust their position to make them cover pixels fully.</p><p>Where the scale factor comes into play is when determining how many pixels are covered by a one-point-wide line.</p><p>On a low-resolution display (with a scale factor of 1.0), a one-point-wide line is one pixel wide. To avoid antialiasing when you draw a one-point-wide horizontal or vertical line, if the line is an odd number of pixels in width, you must offset the position by 0.5 points to either side of a whole-numbered position. If the line is an even number of points in width, to avoid a fuzzy line, you must <em>not</em> do so.</p><figure class="figure"><a name="//apple_ref/doc/uid/TP40010156-CH14-SW30" title="Figure 1-4Appearance of one-point-wide lines on standard and retina displays"></a><figcaption><strong class="caption_number">Figure 1-4</strong>&nbsp;&nbsp;Appearance of one-point-wide lines on standard and retina displays</figcaption><img src="./iOS Drawing Concepts_files/regular_vs_retina_2x.png" alt="" width="409" height="261"></figure><p>On a high-resolution display (with a scale factor of 2.0), a line that is one point wide is not antialiased at all because it occupies two full pixels (from -0.5 to +0.5). To draw a line that covers only a single physical pixel, you would need to make it 0.5 points in thickness and offset its position by 0.25 points. A comparison between the two types of screens is shown in <span class="content_text">Figure 1-4</span>.</p><p>Of course, changing drawing characteristics based on scale factor may have unexpected consequences. A 1-pixel-wide line might look nice on some devices but on a high-resolution device might be so thin that it is difficult to see clearly. It is up to you to determine whether to make such a change.</p></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW5" title="Obtaining Graphics Contexts"></a><h3 class="jump">Obtaining Graphics Contexts</h3><p>Most of the time, graphics contexts are configured for you. Each view object automatically creates a graphics context so that your code can start drawing immediately as soon as your custom <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622529-draw" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622529-draw_7&quot;;return this.s_oc?this.s_oc(e):true">drawRect:</a></code> method is called. As part of this configuration, the underlying <code><a href="https://developer.apple.com/documentation/uikit/uiview" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview_4&quot;;return this.s_oc?this.s_oc(e):true">UIView</a></code> class creates a graphics context (a <code><a href="https://developer.apple.com/documentation/coregraphics/cgcontextref" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontextref_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextRef</a></code> opaque type) for the current drawing environment.</p><p>If you want to draw somewhere other than your view (for example, to capture a series of drawing operations in a PDF or bitmap file), or if you need to call Core Graphics functions that require a context object, you must take additional steps to obtain a graphics context object. The sections below explain how.</p><p>For more information about graphics contexts, modifying the graphics state information, and using graphics contexts to create custom content, see <em><a href="https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001066" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithq_1&quot;;return this.s_oc?this.s_oc(e):true">Quartz 2D Programming Guide</a></em>. For a list of functions used in conjunction with graphics contexts, see <em><a href="https://developer.apple.com/documentation/coregraphics/cgcontext" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext_1&quot;;return this.s_oc?this.s_oc(e):true">CGContext Reference</a></em>, <em><a href="https://developer.apple.com/documentation/coregraphics/cgbitmapcontext" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgbitmapcontext_1&quot;;return this.s_oc?this.s_oc(e):true">CGBitmapContext Reference</a></em>, and <em><a href="https://developer.apple.com/documentation/coregraphics/cgpdfcontext" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgpdfcontext_1&quot;;return this.s_oc?this.s_oc(e):true">CGPDFContext Reference</a></em>.</p><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW18" title="Drawing to the Screen"></a><h4 class="jump">Drawing to the Screen</h4><p>If you use Core Graphics functions to draw to a view, either in the <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622529-draw" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622529-draw_8&quot;;return this.s_oc?this.s_oc(e):true">drawRect:</a></code> method or elsewhere, you’ll need a graphics context for drawing. (The first parameter of many of these functions must be a <code><a href="https://developer.apple.com/documentation/coregraphics/cgcontextref" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontextref_2&quot;;return this.s_oc?this.s_oc(e):true">CGContextRef</a></code> object.) You can call the function <code><a href="https://developer.apple.com/documentation/uikit/1623918-uigraphicsgetcurrentcontext" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/1623918-uigraphicsgetcurrentcontext_1&quot;;return this.s_oc?this.s_oc(e):true">UIGraphicsGetCurrentContext</a></code> to get an explicit version of the same graphics context that’s made implicit in <code>drawRect:</code>. Because it’s the same graphics context, the drawing functions should also make reference to a ULO default coordinate system.</p><p>If you want to use Core Graphics functions to draw in a UIKit view, you should use the ULO coordinate system of UIKit for drawing operations. Alternatively, you can apply a flip transform to the CTM and then draw an object in the UIKit view using Core Graphics native LLO coordinate system. <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW26" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_5&quot;;return this.s_oc?this.s_oc(e):true">Flipping the Default Coordinate System</a></span> discusses flip transforms in detail.</p><p>The <code>UIGraphicsGetCurrentContext</code> function always returns the graphics context currently in effect. For example, if you create a PDF context and then call <code><a href="https://developer.apple.com/documentation/uikit/1623918-uigraphicsgetcurrentcontext" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/1623918-uigraphicsgetcurrentcontext_2&quot;;return this.s_oc?this.s_oc(e):true">UIGraphicsGetCurrentContext</a></code>, you’d receive that PDF context. You must use the graphics context returned by <code>UIGraphicsGetCurrentContext</code> if you use Core Graphics functions to draw to a view.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40010156-CH14-SW21" title="Note"></a><p><strong>Note:</strong>&nbsp;The <code>UIPrintPageRenderer</code> class declares several methods for drawing printable content. In a manner similar to <code>drawRect:</code>, UIKit installs an implicit graphics context for implementations of these methods. This graphics context establishes a ULO default coordinate system. </p><p></p></aside></div></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW22" title="Drawing to Bitmap Contexts and PDF Contexts"></a><h4 class="jump">Drawing to Bitmap Contexts and PDF Contexts</h4><p>UIKit provides functions for rendering images in a bitmap graphics context and for generating PDF content by drawing in a PDF graphics context. Both of these approaches require that you first call a function that creates a graphics context—a bitmap context or a PDF context, respectively. The returned object serves as the current (and implicit) graphics context for subsequent drawing and state-setting calls. When you finish drawing in the context, you call another function to close the context.</p><p>Both the bitmap context and the PDF context provided by UIKit establish a ULO default coordinate system. Core Graphics has corresponding functions for rendering in a bitmap graphics context and for drawing in a PDF graphics context. The context that an app directly creates through Core Graphics, however, establishes a LLO default coordinate system.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40010156-CH14-SW23" title="Note"></a><p><strong>Note:</strong>&nbsp;In iOS, it is recommended that you use the UIKit functions for drawing to bitmap contexts and PDF contexts. However, if you do use the Core Graphics alternatives and intend to display the rendered results, you will have to adjust your code to compensate for the difference in default coordinate systems.  See <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW26" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_6&quot;;return this.s_oc?this.s_oc(e):true">Flipping the Default Coordinate System</a></span> for more information.</p><p></p></aside></div><p>For details, see <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/HandlingImages/Images.html#//apple_ref/doc/uid/TP40010156-CH13-SW1" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_7&quot;;return this.s_oc?this.s_oc(e):true">Drawing and Creating Images</a></span> (for drawing to bitmap contexts) and <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GeneratingPDF/GeneratingPDF.html#//apple_ref/doc/uid/TP40010156-CH10-SW1" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_8&quot;;return this.s_oc?this.s_oc(e):true">Generating PDF Content</a></span> (for drawing to PDF contexts).</p></section></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW6" title="Color and Color Spaces"></a><h3 class="jump">Color and Color Spaces</h3><p>iOS supports the full range of color spaces available in Quartz; however, most apps should need only the RGB color space. Because iOS is designed to run on embedded hardware and display graphics onscreen, the RGB color space is the most appropriate one to use. </p><p>The <code><a href="https://developer.apple.com/documentation/uikit/uicolor" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uicolor_1&quot;;return this.s_oc?this.s_oc(e):true">UIColor</a></code> object provides convenience methods for specifying color values using RGB, HSB, and grayscale values. When creating colors in this way, you never need to specify the color space. It is determined for you automatically by the <code>UIColor</code> object.</p><p>You can also use the <code><a href="https://developer.apple.com/documentation/coregraphics/1456378-cgcontextsetrgbstrokecolor" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1456378-cgcontextsetrgbstrokecolor_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetRGBStrokeColor</a></code> and <code><a href="https://developer.apple.com/documentation/coregraphics/1455624-cgcontextsetrgbfillcolor" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1455624-cgcontextsetrgbfillcolor_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetRGBFillColor</a></code> functions in the Core Graphics framework to create and set colors. Although the Core Graphics <span class="pediaLink" data-header="Framework" data-contents="A framework is a bundle (a structured directory) that contains a dynamic shared library along with associated resources, such as nib files, image files, and header files. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/F_1&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/Framework.html#//apple_ref/doc/uid/TP40008195-CH56">framework</a></span> includes support for creating colors using other color spaces, and for creating custom color spaces, using those colors in your drawing code is not recommended. Your drawing code should always use RGB colors.</p></section></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW11" title="Drawing with Quartz and UIKit"></a><h2 class="jump">Drawing with Quartz and UIKit</h2><p>Quartz is the general name for the native drawing technology in iOS. The Core Graphics <span class="pediaLink" data-header="Framework" data-contents="A framework is a bundle (a structured directory) that contains a dynamic shared library along with associated resources, such as nib files, image files, and header files. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/F_2&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/Framework.html#//apple_ref/doc/uid/TP40008195-CH56">framework</a></span> is at the heart of Quartz, and is the primary interface you use for drawing content. This framework provides data types and functions for manipulating the following: </p><ul class="ul"><li class="li"><p>Graphics contexts</p></li><li class="li"><p>Paths</p></li><li class="li"><p>Images and bitmaps</p></li><li class="li"><p>Transparency layers</p></li><li class="li"><p>Colors, pattern colors, and color spaces</p></li><li class="li"><p>Gradients and shadings</p></li><li class="li"><p>Fonts</p></li><li class="li"><p>PDF content</p></li></ul><p>UIKit builds on the basic features of Quartz by providing a focused set of classes for graphics-related operations. The UIKit graphics classes are not intended as a comprehensive set of drawing tools—Core Graphics already provides that. Instead, they provide drawing support for other UIKit classes. UIKit support includes the following classes and functions: </p><ul class="ul"><li class="li"><p><code><a href="https://developer.apple.com/documentation/uikit/uiimage" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiimage_2&quot;;return this.s_oc?this.s_oc(e):true">UIImage</a></code>, which implements an immutable class for displaying images</p></li><li class="li"><p><code><a href="https://developer.apple.com/documentation/uikit/uicolor" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uicolor_2&quot;;return this.s_oc?this.s_oc(e):true">UIColor</a></code>, which provides basic support for device colors </p></li><li class="li"><p><code><a href="https://developer.apple.com/documentation/uikit/uifont" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uifont_1&quot;;return this.s_oc?this.s_oc(e):true">UIFont</a></code>, which provides font information for classes that need it</p></li><li class="li"><p><code><a href="https://developer.apple.com/documentation/uikit/uiscreen" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiscreen_2&quot;;return this.s_oc?this.s_oc(e):true">UIScreen</a></code>, which provides basic information about the screen</p></li><li class="li"><p><code><a href="https://developer.apple.com/documentation/uikit/uibezierpath" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uibezierpath_1&quot;;return this.s_oc?this.s_oc(e):true">UIBezierPath</a></code>, which enables your app to draw lines, arcs, ovals, and other shapes.</p></li><li class="li"><p>Functions for generating a JPEG or PNG representation of a <code>UIImage</code> object</p></li><li class="li"><p>Functions for drawing to a bitmap graphics context</p></li><li class="li"><p>Functions for generating PDF data by drawing to a PDF graphics context</p></li><li class="li"><p>Functions for drawing rectangles and clipping the drawing area</p></li><li class="li"><p>Functions for changing and getting the current graphics context</p></li></ul><p>For information about the classes and methods that comprise UIKit, see <em><a href="https://developer.apple.com/documentation/uikit" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit_1&quot;;return this.s_oc?this.s_oc(e):true">UIKit Framework Reference</a></em>. For more information about the opaque types and functions that comprise the Core Graphics framework, see <em><!--a target="_self" -->Core Graphics Framework Reference<!--/a--></em>. </p><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW12" title="Configuring the Graphics Context"></a><h3 class="jump">Configuring the Graphics Context</h3><p>Before calling your <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622529-draw" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622529-draw_9&quot;;return this.s_oc?this.s_oc(e):true">drawRect:</a></code> method, the view object creates a graphics context and sets it as the current context. This context exists only for the lifetime of the <code>drawRect:</code> call. You can retrieve a pointer to this graphics context by calling the <code><a href="https://developer.apple.com/documentation/uikit/1623918-uigraphicsgetcurrentcontext" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/1623918-uigraphicsgetcurrentcontext_3&quot;;return this.s_oc?this.s_oc(e):true">UIGraphicsGetCurrentContext</a></code> function. This function returns a reference to a <code><a href="https://developer.apple.com/documentation/coregraphics/cgcontextref" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontextref_3&quot;;return this.s_oc?this.s_oc(e):true">CGContextRef</a></code> type, which you pass to Core Graphics functions to modify the current graphics state. <span class="content_text">Table 1-1</span> lists the main functions you use to set different aspects of the graphics state. For a complete list of functions, see <em><a href="https://developer.apple.com/documentation/coregraphics/cgcontext" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext_2&quot;;return this.s_oc?this.s_oc(e):true">CGContext Reference</a></em>. This table also lists UIKit alternatives where they exist.</p><a name="//apple_ref/doc/uid/TP40010156-CH14-SW13" title="Table 1-1Core graphics functions for modifying graphics state"></a><div class="tableholder"><table class="graybox" border="0" cellspacing="0" cellpadding="5"><caption class="tablecaption"><strong class="caption_number">Table 1-1</strong>&nbsp;&nbsp;Core graphics functions for modifying graphics state</caption><tbody><tr><th scope="col" class="TableHeading_TableRow_TableCell"><p>Graphics state</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Core Graphics functions</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>UIKit alternatives</p></th></tr><tr><td scope="row"><p>Current transformation matrix (CTM)</p></td><td><p><code><a href="https://developer.apple.com/documentation/coregraphics/1456228-cgcontextrotatectm" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1456228-cgcontextrotatectm_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextRotateCTM</a></code></p><p><code><a href="https://developer.apple.com/documentation/coregraphics/1454659-cgcontextscalectm" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1454659-cgcontextscalectm_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextScaleCTM</a></code></p><p><code><a href="https://developer.apple.com/documentation/coregraphics/1455286-cgcontexttranslatectm" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1455286-cgcontexttranslatectm_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextTranslateCTM</a></code></p><p><code><a href="https://developer.apple.com/documentation/coregraphics/cgcontext/1454897-concatenate" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext/1454897-concatenate_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextConcatCTM</a></code></p></td><td><p>None</p></td></tr><tr><td scope="row"><p>Clipping area</p></td><td><p><code><a href="https://developer.apple.com/documentation/coregraphics/1454716-cgcontextcliptorect" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1454716-cgcontextcliptorect_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextClipToRect</a></code></p></td><td><p><code><a href="https://developer.apple.com/documentation/uikit/1623923-uirectclip" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/1623923-uirectclip_1&quot;;return this.s_oc?this.s_oc(e):true">UIRectClip</a></code> function</p></td></tr><tr><td scope="row"><p>Line: Width, join, cap, dash, miter limit</p></td><td><p><code><a href="https://developer.apple.com/documentation/coregraphics/1455270-cgcontextsetlinewidth" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1455270-cgcontextsetlinewidth_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetLineWidth</a></code></p><p><code><a href="https://developer.apple.com/documentation/coregraphics/cgcontext/1455973-setlinejoin" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext/1455973-setlinejoin_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetLineJoin</a></code></p><p><code><a href="https://developer.apple.com/documentation/coregraphics/cgcontext/1454326-setlinecap" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext/1454326-setlinecap_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetLineCap</a></code></p><p><code><a href="https://developer.apple.com/documentation/coregraphics/1455911-cgcontextsetlinedash" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1455911-cgcontextsetlinedash_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetLineDash</a></code></p><p><code><a href="https://developer.apple.com/documentation/coregraphics/1456499-cgcontextsetmiterlimit" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1456499-cgcontextsetmiterlimit_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetMiterLimit</a></code></p></td><td><p>None</p></td></tr><tr><td scope="row"><p>Accuracy of curve estimation </p></td><td><p><code><a href="https://developer.apple.com/documentation/coregraphics/cgcontext/1455798-setflatness" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext/1455798-setflatness_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetFlatness</a></code></p></td><td><p>None</p></td></tr><tr><td scope="row"><p>Anti-aliasing setting</p></td><td><p><code><a href="https://developer.apple.com/documentation/coregraphics/1456310-cgcontextsetallowsantialiasing" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1456310-cgcontextsetallowsantialiasing_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetAllowsAntialiasing</a></code></p></td><td><p>None</p></td></tr><tr><td scope="row"><p>Color: Fill and stroke settings</p></td><td><p><code><a href="https://developer.apple.com/documentation/coregraphics/1455624-cgcontextsetrgbfillcolor" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1455624-cgcontextsetrgbfillcolor_2&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetRGBFillColor</a></code></p><p><code><a href="https://developer.apple.com/documentation/coregraphics/1456378-cgcontextsetrgbstrokecolor" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1456378-cgcontextsetrgbstrokecolor_2&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetRGBStrokeColor</a></code></p></td><td><p><code><a href="https://developer.apple.com/documentation/uikit/uicolor" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uicolor_3&quot;;return this.s_oc?this.s_oc(e):true">UIColor</a></code> class</p></td></tr><tr><td scope="row"><p>Alpha global value (transparency)</p></td><td><p><code><a href="https://developer.apple.com/documentation/coregraphics/cgcontext/1456404-setalpha" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext/1456404-setalpha_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetAlpha</a></code></p></td><td><p>None</p></td></tr><tr><td scope="row"><p>Rendering intent</p></td><td><p><code><a href="https://developer.apple.com/documentation/coregraphics/1455544-cgcontextsetrenderingintent" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1455544-cgcontextsetrenderingintent_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetRenderingIntent</a></code></p></td><td><p>None</p></td></tr><tr><td scope="row"><p>Color space: Fill and stroke settings</p></td><td><p><code><a href="https://developer.apple.com/documentation/coregraphics/cgcontext/1455151-setfillcolorspace" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext/1455151-setfillcolorspace_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetFillColorSpace</a></code></p><p><code><a href="https://developer.apple.com/documentation/coregraphics/cgcontext/1454396-setstrokecolorspace" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext/1454396-setstrokecolorspace_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetStrokeColorSpace</a></code></p></td><td><p><code><a href="https://developer.apple.com/documentation/uikit/uicolor" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uicolor_4&quot;;return this.s_oc?this.s_oc(e):true">UIColor</a></code> class</p></td></tr><tr><td scope="row"><p>Text: Font, font size, character spacing, text drawing mode</p></td><td><p><code><a href="https://developer.apple.com/documentation/coregraphics/1454950-cgcontextsetfont" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1454950-cgcontextsetfont_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetFont</a></code></p><p><code><a href="https://developer.apple.com/documentation/coregraphics/1456426-cgcontextsetfontsize" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1456426-cgcontextsetfontsize_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetFontSize</a></code></p><p><code><a href="https://developer.apple.com/documentation/coregraphics/cgcontext/1454786-setcharacterspacing" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext/1454786-setcharacterspacing_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetCharacterSpacing</a></code></p></td><td><p><code><a href="https://developer.apple.com/documentation/uikit/uifont" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uifont_2&quot;;return this.s_oc?this.s_oc(e):true">UIFont</a></code> class</p></td></tr><tr><td scope="row"><p>Blend mode</p></td><td><p><code><a href="https://developer.apple.com/documentation/coregraphics/1455994-cgcontextsetblendmode" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1455994-cgcontextsetblendmode_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSetBlendMode</a></code></p></td><td><p>The <code><a href="https://developer.apple.com/documentation/uikit/uiimage" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiimage_3&quot;;return this.s_oc?this.s_oc(e):true">UIImage</a></code> class and various drawing functions let you specify which blend mode to use.</p></td></tr></tbody></table></div><p>The graphics context contains a stack of saved graphics states. When Quartz creates a graphics context, the stack is empty. Using the <code><a href="https://developer.apple.com/documentation/coregraphics/1456156-cgcontextsavegstate" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1456156-cgcontextsavegstate_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextSaveGState</a></code> function pushes a copy of the current graphics state onto the stack. Thereafter, modifications you make to the graphics state affect subsequent drawing operations but do not affect the copy stored on the stack. When you are done making modifications, you can return to the previous graphics state by popping the saved state off the top of the stack using the <code><a href="https://developer.apple.com/documentation/coregraphics/1455391-cgcontextrestoregstate" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1455391-cgcontextrestoregstate_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextRestoreGState</a></code> function. Pushing and popping graphics states in this manner is a fast way to return to a previous state and eliminates the need to undo each state change individually. It is also the only way to restore some aspects of the state, such as the clipping path, back to their original settings.</p><p>For general information about graphics contexts and using them to configure the drawing environment, see <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_context/dq_context.html#//apple_ref/doc/uid/TP30001066-CH203" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithq_2&quot;;return this.s_oc?this.s_oc(e):true">Graphics Contexts</a></span> in <em><a href="https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001066" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithq_3&quot;;return this.s_oc?this.s_oc(e):true">Quartz 2D Programming Guide</a></em>.</p></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW20" title="Creating and Drawing Paths"></a><h3 class="jump">Creating and Drawing Paths</h3><p>A path is a vector-based shapes created from a sequence of lines and Bézier curves. UIKit includes the <code><a href="https://developer.apple.com/documentation/uikit/1623926-uirectframe" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/1623926-uirectframe_1&quot;;return this.s_oc?this.s_oc(e):true">UIRectFrame</a></code> and <code><a href="https://developer.apple.com/documentation/uikit/1623932-uirectfill" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/1623932-uirectfill_1&quot;;return this.s_oc?this.s_oc(e):true">UIRectFill</a></code> functions (among others) for drawing simple paths such as rectangles in your views. Core Graphics also includes convenience functions for creating simple paths such as rectangles and ellipses. </p><p>For more complex paths, you must create the path yourself using the <code><a href="https://developer.apple.com/documentation/uikit/uibezierpath" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uibezierpath_2&quot;;return this.s_oc?this.s_oc(e):true">UIBezierPath</a></code> class of UIKit, or using the functions that operate on the <code><a href="https://developer.apple.com/documentation/coregraphics/cgpath" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgpath_1&quot;;return this.s_oc?this.s_oc(e):true">CGPathRef</a></code> opaque type in the Core Graphics <span class="pediaLink" data-header="Framework" data-contents="A framework is a bundle (a structured directory) that contains a dynamic shared library along with associated resources, such as nib files, image files, and header files. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/F_3&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/Framework.html#//apple_ref/doc/uid/TP40008195-CH56">framework</a></span>. Although you can construct a path without a graphics context using either API, the points in the path still must refer to the current coordinate system (which either has a ULO or LLO orientation), and you still need a graphics context to actually render the path.</p><p>When drawing a path, you must have a current context set. This context can be a custom view’s context (in <code>drawRect:</code>), a bitmap context, or a PDF context. The coordinate system determines how the path is rendered. <code><a href="https://developer.apple.com/documentation/uikit/uibezierpath" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uibezierpath_3&quot;;return this.s_oc?this.s_oc(e):true">UIBezierPath</a></code> assumes a ULO coordinate system. Thus, if your view is flipped (to use LLO coordinates), the resulting shape may render differently than intended.  For best results, you should always specify points relative to the origin of the current coordinate system of the graphics context used for rendering.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40010156-CH14-SW9" title="Note"></a><p><strong>Note:</strong>&nbsp;Arcs are an aspect of paths that require additional work even if this “rule” is followed. If you create a path using Core Graphic functions that locate points in a ULO coordinate system, and then render the path in a UIKit view, the direction an arc “points” is different. See <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW8" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_9&quot;;return this.s_oc?this.s_oc(e):true">Side Effects of Drawing with Different Coordinate Systems</a></span> for more on this subject.</p><p></p></aside></div><p>For creating paths in iOS, it is recommended that you use <code><a href="https://developer.apple.com/documentation/uikit/uibezierpath" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uibezierpath_4&quot;;return this.s_oc?this.s_oc(e):true">UIBezierPath</a></code> instead of <code>CGPath</code> functions unless you need some of the capabilities that only Core Graphics provides, such as adding ellipses to paths. For more on creating and rendering paths in UIKit, see <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html#//apple_ref/doc/uid/TP40010156-CH11-SW1" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_10&quot;;return this.s_oc?this.s_oc(e):true">Drawing Shapes Using Bézier Paths</a></span>.</p><p>For information on using <code>UIBezierPath</code> to draw paths, see <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html#//apple_ref/doc/uid/TP40010156-CH11-SW1" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_11&quot;;return this.s_oc?this.s_oc(e):true">Drawing Shapes Using Bézier Paths</a></span>. For information on how to draw paths using Core Graphics, including information about how you specify the points for complex path elements, see <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_paths/dq_paths.html#//apple_ref/doc/uid/TP30001066-CH211" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithq_4&quot;;return this.s_oc?this.s_oc(e):true">Paths</a></span> in <em><a href="https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001066" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithq_5&quot;;return this.s_oc?this.s_oc(e):true">Quartz 2D Programming Guide</a></em>. For information on the functions you use to create paths, see <em><a href="https://developer.apple.com/documentation/coregraphics/cgcontext" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext_3&quot;;return this.s_oc?this.s_oc(e):true">CGContext Reference</a></em> and <em><a href="https://developer.apple.com/documentation/coregraphics/cgpath" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgpath_2&quot;;return this.s_oc?this.s_oc(e):true">CGPath Reference</a></em>.</p></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW35" title="Creating Patterns, Gradients, and Shadings"></a><h3 class="jump">Creating Patterns, Gradients, and Shadings</h3><p>The Core Graphics <span class="pediaLink" data-header="Framework" data-contents="A framework is a bundle (a structured directory) that contains a dynamic shared library along with associated resources, such as nib files, image files, and header files. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/F_4&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/Framework.html#//apple_ref/doc/uid/TP40008195-CH56">framework</a></span> includes additional functions for creating patterns, gradients, and shadings. You use these types to create non monochrome colors and use them to fill the paths you create. Patterns are created from repeating images or content. Gradients and shadings provide different ways to create smooth transitions from color to color. </p><p>The details for creating and using patterns, gradients, and shadings are all covered in <em><a href="https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001066" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithq_6&quot;;return this.s_oc?this.s_oc(e):true">Quartz 2D Programming Guide</a></em>.</p></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW10" title="Customizing the Coordinate Space"></a><h3 class="jump">Customizing the Coordinate Space</h3><p>By default, UIKit creates a straightforward current transformation matrix that maps points onto pixels. Although you can do all of your drawing without modifying that matrix, sometimes it can be convenient to do so.</p><p>When your view’s <code>drawRect:</code> method is first called, the CTM is configured so that the origin of the coordinate system matches the your view’s origin, its positive X axis extends to the right, and its positive Y axis extends down. However, you can change the CTM by adding scaling, rotation, and translation factors to it and thereby change the size, orientation, and position of the default coordinate system relative to the underlying view or window.</p><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW4" title="Using Coordinate Transforms to Improve Drawing Performance"></a><h4 class="jump">Using Coordinate Transforms to Improve Drawing Performance</h4><p>Modifying the CTM is a standard technique for drawing content in a view because it allows you to reuse paths, which potentially reduces the amount of computation required while drawing. For example, if you want to draw a square starting at the point (20, 20), you could create a path that moves to (20, 20) and then draws the needed set of lines to complete the square. However, if you later decide to move that square to the point (10, 10), you would have to recreate the path with the new starting point. Because creating paths is a relatively expensive operation, it is preferable to create a square whose origin is at (0, 0) and to modify the CTM so that the square is drawn at the desired origin.</p><p>In the Core Graphics <span class="pediaLink" data-header="Framework" data-contents="A framework is a bundle (a structured directory) that contains a dynamic shared library along with associated resources, such as nib files, image files, and header files. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/F_5&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/Framework.html#//apple_ref/doc/uid/TP40008195-CH56">framework</a></span>, there are two ways to modify the CTM. You can modify the CTM directly using the CTM manipulation functions defined in <em><a href="https://developer.apple.com/documentation/coregraphics/cgcontext" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgcontext_4&quot;;return this.s_oc?this.s_oc(e):true">CGContext Reference</a></em>. You can also create a <code><a href="https://developer.apple.com/documentation/coregraphics/cgaffinetransform" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgaffinetransform_1&quot;;return this.s_oc?this.s_oc(e):true">CGAffineTransform</a></code> structure, apply any transformations you want, and then concatenate that transform onto the CTM. Using an affine transform lets you group transformations and then apply them to the CTM all at once. You can also evaluate and invert affine transforms and use them to modify point, size, and rectangle values in your code. For more information on using affine transforms, see <em><a href="https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001066" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/GraphicsImaging/Conceptual/drawingwithq_7&quot;;return this.s_oc?this.s_oc(e):true">Quartz 2D Programming Guide</a></em> and <em><a href="https://developer.apple.com/documentation/coregraphics/cgaffinetransform-rb5" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgaffinetransform-rb5_1&quot;;return this.s_oc?this.s_oc(e):true">CGAffineTransform Reference</a></em>. </p></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW26" title="Flipping the Default Coordinate System"></a><h4 class="jump">Flipping the Default Coordinate System</h4><p>Flipping in UIKit drawing modifies the backing <code><a href="https://developer.apple.com/documentation/quartzcore/calayer" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/quartzcore/calayer_2&quot;;return this.s_oc?this.s_oc(e):true">CALayer</a></code> to align a drawing environment having a LLO coordinate system with the default coordinate system of UIKit. If you only use UIKit methods and function for drawing, you shouldn’t need to flip the CTM. However, if you mix Core Graphics or Image I/O function calls with UIKit calls, flipping the CTM might be necessary.</p><p>Specifically, if you draw an image or PDF document by calling Core Graphics functions directly, the object is rendered upside-down in the view’s context. You must flip the CTM to display the image and pages correctly.</p><p>To flip a object drawn to a Core Graphics context so that it appears correctly when displayed in a UIKit view, you must modify the CTM in two steps. You translate the origin to the upper-left corner of the drawing area, and then you apply a scale translation, modifying the y-coordinate by -1. The code for doing this looks similar to the following:</p><div class="codesample clear"><table><tbody><tr><td scope="row"><pre>CGContextSaveGState(graphicsContext);<span></span></pre></td></tr><tr><td scope="row"><pre>CGContextTranslateCTM(graphicsContext, 0.0, imageHeight);<span></span></pre></td></tr><tr><td scope="row"><pre>CGContextScaleCTM(graphicsContext, 1.0, -1.0);<span></span></pre></td></tr><tr><td scope="row"><pre>CGContextDrawImage(graphicsContext, image, CGRectMake(0, 0, imageWidth, imageHeight));<span></span></pre></td></tr><tr><td scope="row"><pre>CGContextRestoreGState(graphicsContext);<span></span></pre></td></tr></tbody></table></div><p>If you create a <code><a href="https://developer.apple.com/documentation/uikit/uiimage" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiimage_4&quot;;return this.s_oc?this.s_oc(e):true">UIImage</a></code> object initialized with a Core Graphics image object, UIKit performs the flip transform for you. Every <code>UIImage</code> object is backed by a <code><a href="https://developer.apple.com/documentation/coregraphics/cgimageref" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgimageref_1&quot;;return this.s_oc?this.s_oc(e):true">CGImageRef</a></code> opaque type. You can access the Core Graphics object through the <code>CGImage</code> property and do some work with the image. (Core Graphics has image-related facilities not available in UIKit.) When you are finished, you can recreate the <code>UIImage</code> object from the modified <code>CGImageRef</code> object. </p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40010156-CH14-SW27" title="Note"></a><p><strong>Note:</strong>&nbsp;You can use the Core Graphics function <code><a href="https://developer.apple.com/documentation/coregraphics/1454845-cgcontextdrawimage" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1454845-cgcontextdrawimage_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextDrawImage</a></code> to draw an image to any rendering destination. This function has two parameters, the first for a graphics context and the second for a rectangle that defines both the size of the image and its location in a drawing surface such as a view. When drawing an image with <code><a href="https://developer.apple.com/documentation/coregraphics/1454845-cgcontextdrawimage" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1454845-cgcontextdrawimage_2&quot;;return this.s_oc?this.s_oc(e):true">CGContextDrawImage</a></code>, if you don’t adjust the current coordinate system to a LLO orientation, the image appears inverted in a UIKit view. Additionally, the origin of the rectangle passed into this function is relative to the origin of the coordinate system that is current when the function is called.</p><p></p></aside></div></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW8" title="Side Effects of Drawing with Different Coordinate Systems"></a><h4 class="jump">Side Effects of Drawing with Different Coordinate Systems</h4><p>Some rendering oddities are brought to light when you draw an object with with reference to the default coordinate system of one drawing technology and then render it in a graphics context of the other. You may want to adjust your code to account for these side effects.</p><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW28" title="Arcs and Rotations"></a><h5 class="jump">Arcs and Rotations</h5><p>If you draw a path with functions such as <code><a href="https://developer.apple.com/documentation/coregraphics/1455756-cgcontextaddarc" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1455756-cgcontextaddarc_1&quot;;return this.s_oc?this.s_oc(e):true">CGContextAddArc</a></code> and <code><a href="https://developer.apple.com/documentation/coregraphics/1411147-cgpathaddarc" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1411147-cgpathaddarc_1&quot;;return this.s_oc?this.s_oc(e):true">CGPathAddArc</a></code> and assume a LLO coordinate system, then you need to flip the CTM to render the arc correctly in a UIKit view.  However, if you use the same function to create an arc with points located in a ULO coordinate system and then render the path in a UIKit view, you’ll notice that the arc is an altered version of its original.  The terminating endpoint of the arc now points in the opposite direction of what that endpoint would do were the arc created using the <code><a href="https://developer.apple.com/documentation/uikit/uibezierpath" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uibezierpath_5&quot;;return this.s_oc?this.s_oc(e):true">UIBezierPath</a></code> class. For example, a downward-pointing arrow now points upward (as shown in <span class="content_text">Figure 1-5</span>), and the direction in which the arc “bends” is also different. You must change the direction of Core Graphics-drawn arcs to account for the ULO-based coordinate system; this direction is controlled by the <code>startAngle</code> and <code>endAngle</code> parameters of those functions.</p><figure class="figure"><a name="//apple_ref/doc/uid/TP40010156-CH14-SW33" title="Figure 1-5Arc rendering in Core Graphics versus UIKit"></a><figcaption><strong class="caption_number">Figure 1-5</strong>&nbsp;&nbsp;Arc rendering in Core Graphics versus UIKit</figcaption><img src="./iOS Drawing Concepts_files/flipped_coordinates-1_2x.png" alt="" width="507" height="193"></figure><p>You can observe the same kind of mirroring effect if you rotate an object (for example, by calling <code><a href="https://developer.apple.com/documentation/coregraphics/1456228-cgcontextrotatectm" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/1456228-cgcontextrotatectm_2&quot;;return this.s_oc?this.s_oc(e):true">CGContextRotateCTM</a></code>). If you rotate an object using Core Graphics calls that make reference to a ULO coordinate system, the direction of the object when rendered in UIKit is reversed. You must account for the different directions of rotation in your code; with <code>CGContextRotateCTM</code>, you do this by inverting the sign of the <code>angle</code> parameter (so, for example, a negative value becomes a positive value). </p></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW29" title="Shadows"></a><h5 class="jump">Shadows</h5><p>The direction a shadow falls from its object is specified by an offset value, and the meaning of that offset is a convention of a drawing framework. In UIKit, positive x and y offsets make a shadow go down and to the right of an object. In Core Graphics, positive x and y offsets make a shadow go up and to the right of an object. Flipping the CTM to align an object with the default coordinate system of UIKit does not affect the object’s shadow, and so a shadow does not correctly track its object. To get it to track correctly, you must modify the offset values appropriately for the current coordinate system.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40010156-CH14-SW31" title="Note"></a><p><strong>Note:</strong>&nbsp;Prior to iOS 3.2, Core Graphics and UIKit shared the same convention for shadow direction: positive offset values make the shadow go down and to the right of an object.</p><p></p></aside></div></section></section></section></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW15" title="Applying Core Animation Effects"></a><h2 class="jump">Applying Core Animation Effects</h2><p>Core Animation is an Objective-C <span class="pediaLink" data-header="Framework" data-contents="A framework is a bundle (a structured directory) that contains a dynamic shared library along with associated resources, such as nib files, image files, and header files. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/F_6&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/Framework.html#//apple_ref/doc/uid/TP40008195-CH56">framework</a></span> that provides infrastructure for creating fluid, real-time animations quickly and easily. Core Animation is not a drawing technology itself, in the sense that it does not provide primitive routines for creating shapes, images, or other types of content. Instead, it is a technology for manipulating and displaying content that you created using other technologies. </p><p>Most apps can benefit from using Core Animation in some form in iOS. Animations provide feedback to the user about what is happening. For example, when the user navigates through the Settings app, screens slide in and out of view based on whether the user is navigating further down the preferences hierarchy or back up to the root node. This kind of feedback is important and provides contextual information for the user. It also enhances the visual style of an app.</p><p>In most cases, you may be able to reap the benefits of Core Animation with very little effort. For example, several <span class="pediaLink" data-header="Declared property" data-contents="A declared property provides a syntactical shorthand for declaring a class’s accessor methods and, optionally, implementing them. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/D_3&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/DeclaredProperty.html#//apple_ref/doc/uid/TP40008195-CH13">properties</a></span> of the <code>UIView</code> class (including the view’s frame, center, color, and opacity—among others) can be configured to trigger animations when their values change. You have to do some work to let UIKit know that you want these animations performed, but the animations themselves are created and run automatically for you. For information about how to trigger the built-in view animations, see <span class="content_text"><!--a target="_self" -->Animating Views<!--/a--></span> in <em><a href="https://developer.apple.com/documentation/uikit/uiview" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview_5&quot;;return this.s_oc?this.s_oc(e):true">UIView Class Reference</a></em>. </p><p>When you go beyond the basic animations, you must interact more directly with Core Animation classes and methods. The following sections provide information about Core Animation and show you how to work with its classes and methods to create typical animations in iOS. For additional information about Core Animation and how to use it, see <em><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/In_1&quot;;return this.s_oc?this.s_oc(e):true">Core Animation Programming Guide</a></em>. </p><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW16" title="About Layers"></a><h3 class="jump">About Layers</h3><p>The key technology in Core Animation is the layer object. Layers are lightweight objects that are similar in nature to <span class="pediaLink" data-header="Model-View-Controller" data-contents="The Model-View-Controller (MVC) design pattern assigns objects in an application one of three roles: model, view, or controller. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/M_2&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/MVC.html#//apple_ref/doc/uid/TP40008195-CH32">views</a></span>, but that are actually <span class="pediaLink" data-header="Model object" data-contents="A model object is a type of object that contains the data of an application, provides access to that data, and implements logic to manipulate the data. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/M_3&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/ModelObject.html#//apple_ref/doc/uid/TP40008195-CH31">model objects</a></span> that encapsulate geometry, timing, and visual <span class="pediaLink" data-header="Object modeling" data-contents="Object modeling is the process of designing the objects or classes through which an object-oriented application examines and manipulates some service. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/O_1&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/ObjectModeling.html#//apple_ref/doc/uid/TP40008195-CH41">properties</a></span> for the content you want to display. The content itself is provided in one of three ways:</p><ul class="ul"><li class="li"><p>You can assign a <code>CGImageRef</code> to the <code>contents</code> <span class="pediaLink" data-header="Declared property" data-contents="A declared property provides a syntactical shorthand for declaring a class’s accessor methods and, optionally, implementing them. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/D_4&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/DeclaredProperty.html#//apple_ref/doc/uid/TP40008195-CH13">property</a></span> of the layer object.</p></li><li class="li"><p>You can assign a delegate to the layer and let the delegate handle the drawing.</p></li><li class="li"><p>You can subclass <code><a href="https://developer.apple.com/documentation/quartzcore/calayer" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/quartzcore/calayer_3&quot;;return this.s_oc?this.s_oc(e):true">CALayer</a></code> and <span class="pediaLink" data-header="Method overriding" data-contents="Method overriding is a language feature in which a class can provide an implementation of a method that is already provided by one of its parent classes. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/M_4&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/MethodOverriding.html#//apple_ref/doc/uid/TP40008195-CH57">override</a></span> one of the display methods.</p></li></ul><p>When you manipulate a layer object’s properties, what you are actually manipulating is the model-level data that determines how the associated content should be displayed. The actual rendering of that content is handled separately from your code and is heavily optimized to ensure it is fast. All you must do is set the layer content, configure the animation properties, and then let Core Animation take over. </p><p>For more information about layers and how they are used, see <em><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40004514" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreAnimation_guide/In_2&quot;;return this.s_oc?this.s_oc(e):true">Core Animation Programming Guide</a></em>.</p></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW17" title="About Animations"></a><h3 class="jump">About Animations</h3><p>When it comes to animating layers, Core Animation uses separate animation objects to control the timing and behavior of the animation. The <code><a href="https://developer.apple.com/documentation/quartzcore/caanimation" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/quartzcore/caanimation_1&quot;;return this.s_oc?this.s_oc(e):true">CAAnimation</a></code> class and its subclasses provide different types of animation behaviors that you can use in your code. You can create simple animations that migrate a <span class="pediaLink" data-header="Declared property" data-contents="A declared property provides a syntactical shorthand for declaring a class’s accessor methods and, optionally, implementing them. "><a data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/D_5&quot;;return this.s_oc?this.s_oc(e):true" data-href="../../../../General/Conceptual/DevPedia-CocoaCore/DeclaredProperty.html#//apple_ref/doc/uid/TP40008195-CH13">property</a></span> from one value to another, or you can create complex keyframe animations that track the animation through the set of values and timing functions you provide.</p><p>Core Animation also lets you group multiple animations together into a single unit, called a transaction. The <code><a href="https://developer.apple.com/documentation/quartzcore/catransaction" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/quartzcore/catransaction_1&quot;;return this.s_oc?this.s_oc(e):true">CATransaction</a></code> object manages the group of animations as a unit. You can also use the methods of this class to set the duration of the animation.</p><p> For examples of how to create custom animations, see <em><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Animation_Types_Timing/Introduction/Introduction.html#//apple_ref/doc/uid/TP40006166" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Animation_Types_Timing_1&quot;;return this.s_oc?this.s_oc(e):true">Animation Types and Timing Programming Guide</a></em>. </p></section><section><a name="//apple_ref/doc/uid/TP40010156-CH14-SW37" title="Accounting for Scale Factors in Core Animation Layers"></a><h3 class="jump">Accounting for Scale Factors in Core Animation Layers</h3><p>Apps that use Core Animation layers directly to provide content may need to adjust their drawing code to account for scale factors. Normally, when you draw in your view’s <code><a href="https://developer.apple.com/documentation/uikit/uiview/1622529-draw" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiview/1622529-draw_10&quot;;return this.s_oc?this.s_oc(e):true">drawRect:</a></code> method, or in the <code><a href="https://developer.apple.com/documentation/quartzcore/calayerdelegate/2097262-drawlayer" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/quartzcore/calayerdelegate/2097262-drawlayer_1&quot;;return this.s_oc?this.s_oc(e):true">drawLayer:inContext:</a></code> method of the layer’s delegate, the system automatically adjusts the graphics context to account for scale factors. However, knowing or changing that scale factor might still be necessary when your view does one of the following: </p><ul class="ul"><li class="li"><p>Creates additional Core Animation layers with different scale factors and composites them into its own content</p></li><li class="li"><p>Sets the <code><a href="https://developer.apple.com/documentation/quartzcore/calayer/1410773-contents" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/quartzcore/calayer/1410773-contents_1&quot;;return this.s_oc?this.s_oc(e):true">contents</a></code> property of a Core Animation layer directly</p></li></ul><p>Core Animation’s compositing engine looks at the <code><a href="https://developer.apple.com/documentation/quartzcore/calayer/1410746-contentsscale" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/quartzcore/calayer/1410746-contentsscale_1&quot;;return this.s_oc?this.s_oc(e):true">contentsScale</a></code> property of each layer to determine whether the contents of that layer need to be scaled during compositing. If your app creates layers without an associated view, each new layer object’s scale factor is initially set to 1.0. If you do not change that scale factor, and if you subsequently draw the layer on a high-resolution screen, the layer’s contents are scaled automatically to compensate for the difference in scale factors. If you do not want the contents to be scaled, you can change the layer’s scale factor to 2.0 by setting a new value for the <code>contentsScale</code> property, but if you do so without providing high-resolution content, your existing content may appear smaller than you were expecting. To fix that problem, you need to provide higher-resolution content for your layer. </p><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/TP40010156-CH14-DontLinkElementID_7" title="Important"></a><p><strong>Important:</strong>&nbsp;The <code><a href="https://developer.apple.com/documentation/quartzcore/calayer/1410872-contentsgravity" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/quartzcore/calayer/1410872-contentsgravity_1&quot;;return this.s_oc?this.s_oc(e):true">contentsGravity</a></code> property of the layer plays a role in determining whether standard-resolution layer content is scaled on a high-resolution screen. This property is set to the value <code><a href="https://developer.apple.com/documentation/quartzcore/kcagravityresize" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/quartzcore/kcagravityresize_1&quot;;return this.s_oc?this.s_oc(e):true">kCAGravityResize</a></code> by default, which causes the layer content to be scaled to fit the layer’s bounds. Changing the gravity to a nonresizing option eliminates the automatic scaling that would otherwise occur. In such a situation, you may need to adjust your content or the scale factor accordingly. </p><p></p></aside></div><p>Adjusting the content of your layer to accommodate different scale factors is most appropriate when you set the <code><a href="https://developer.apple.com/documentation/quartzcore/calayer/1410773-contents" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/quartzcore/calayer/1410773-contents_2&quot;;return this.s_oc?this.s_oc(e):true">contents</a></code> property of a layer directly. Quartz images have no notion of scale factors and therefore work directly with pixels. Therefore, before creating the <code><a href="https://developer.apple.com/documentation/coregraphics/cgimageref" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/coregraphics/cgimageref_2&quot;;return this.s_oc?this.s_oc(e):true">CGImageRef</a></code> object you plan to use for the layer’s contents, check the scale factor and adjust the size of your image accordingly. Specifically, load an appropriately sized image from your app bundle or use the <code><a href="https://developer.apple.com/documentation/uikit/1623912-uigraphicsbeginimagecontextwitho" class="urlLink" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/1623912-uigraphicsbeginimagecontextwitho_1&quot;;return this.s_oc?this.s_oc(e):true">UIGraphicsBeginImageContextWithOptions</a></code> function to create an image whose scale factor matches the scale factor of your layer. If you do not create a high-resolution bitmap, the existing bitmap may be scaled as discussed previously. </p><p>For information on how to specify and load high-resolution images, see <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/SupportingHiResScreensInViews/SupportingHiResScreensInViews.html#//apple_ref/doc/uid/TP40010156-CH15-SW3" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_12&quot;;return this.s_oc?this.s_oc(e):true">Loading Images into Your App</a></span>. For information about how to create high-resolution images, see <span class="content_text"><a href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#//apple_ref/doc/uid/TP40010156-CH14-SW22" data-renderer-version="1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_13&quot;;return this.s_oc?this.s_oc(e):true">Drawing to Bitmap Contexts and PDF Contexts</a></span>.</p></section></section>
        <div id="pageNavigationLinks_bottom" class="pageNavigationLinks">
            <a class="nextLink" rel="next" href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/BezierPaths/BezierPaths.html" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_14&quot;;return this.s_oc?this.s_oc(e):true">Next</a><a class="previousLink" rel="prev" href="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/Introduction/Introduction.html" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS_15&quot;;return this.s_oc?this.s_oc(e):true">Previous</a>
        </div><br>
        <div class="copyright"><br><hr><div align="center"><p class="content_text" lang="en" dir="ltr"> Copyright © 2012 Apple Inc. All Rights Reserved.  <a href="http://www.apple.com/legal/internet-services/terms/site.html" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/legal/internet-services/terms/site.html_1&quot;;return this.s_oc?this.s_oc(e):true">Terms of Use</a>   |  <a href="http://www.apple.com/privacy/" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/privacy/_1&quot;;return this.s_oc?this.s_oc(e):true">Privacy Policy</a>  |  Updated: 2012-09-19</p></div></div>

        <div id="pediaWindow">
            <div id="pediaHeader"></div>
            <div id="pediaBody"></div>
        </div>
    </article>

    <div id="blackout">
    <div id="preload"></div>
</div>
<div id="modal" aria-hidden="true">
    <div id="closebox" tabindex="0" aria-label="Close feedback form" role="button"></div>
    <div id="sending" class="hidden">
        <h2 tabindex="0">Sending feedback…</h2>
        <div id="sending_img"></div>
    </div>
    <div id="error" class="hidden">
        <h2 tabindex="0">We’re sorry, an error has occurred.</h2>
        <p>Please try submitting your feedback later.</p>
        <div id="error_icon"></div>
    </div>
    <div id="success" class="hidden">
        <h2 tabindex="0">Thank you for providing feedback!</h2>
        <p>Your input helps improve our developer documentation.</p>
        <div id="thank_you_icon"></div>
    </div>
    
    <form id="feedback" action="https://developer.apple.com/library/archive/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GraphicsDrawingOverview/GraphicsDrawingOverview.html#" method="post">
        <div class="left-leaf">
            <h2 id="helpful_title" data-asterisk="a1" tabindex="0">How helpful is this document?</h2>     
            <sup id="a1" class="asterisk" aria-hidden="true">*</sup>

            <div id="star_group" role="radiogroup" aria-required="true">
                <label> 
                    <input class="radio" type="radio" name="helped" value="1"> 
                    Very helpful
                </label>
                <label> 
                    <input class="radio" type="radio" name="helped" value="2"> 
                    Somewhat helpful
                </label>
                <label>
                    <input class="radio" type="radio" name="helped" value="3"> 
                    Not helpful
                </label>
            </div>
        </div>
        <div class="right-leaf">
            <h2>How can we improve this document?</h2>
            <div id="improve" class="checkboxes">
                <label>
                    <input type="checkbox" name="typo"> 
                    Fix typos or links
                </label>
                <label>
                    <input type="checkbox" name="infoIncorrect"> 
                    Fix incorrect information
                </label>
                <label>
                    <input type="checkbox" name="needs_examples"> 
                    Add or update code samples
                </label>
                <label>
                    <input type="checkbox" name="needs_art"> 
                    Add or update illustrations
                </label>
                <label>
                    <input type="checkbox" name="missingInfo"> 
                    Add information about...
                </label>
            </div>
        </div>

        <textarea id="comment" name="problem" cols="70" rows="8" placeholder="Please tell us more about your experience with this document" data-asterisk="a2" required=""></textarea>
        <sup id="a2" class="asterisk" aria-hidden="true">*</sup>

        <p class="fineprint">
            <em aria-hidden="true"><span>*</span> Required information</em>
        </p> 

        <input id="submit" type="button" value="Send">

        <section id="legal">
            <p>
                To submit a product bug or enhancement request, please visit the 
                <a href="https://developer.apple.com/bugreporter/" target="_blank" onclick="s_objectID=&quot;https://developer.apple.com/bugreporter/_1&quot;;return this.s_oc?this.s_oc(e):true">Bug Reporter</a> 
                page.
            </p>
            <p>
                Please read <a href="http://www.apple.com/legal/policies/ideas.html" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/legal/policies/ideas.html_1&quot;;return this.s_oc?this.s_oc(e):true">Apple's Unsolicited Idea Submission Policy</a> 
                before you send us your feedback.
            </p> 
        </section>
    </form>
</div>

    
    <script charset="utf-8" src="./iOS Drawing Concepts_files/prototype.js"></script>
    <script src="./iOS Drawing Concepts_files/library.js"></script>


</body></html>